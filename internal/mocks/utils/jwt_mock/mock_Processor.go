// Code generated by mockery. DO NOT EDIT.

package types

import (
	mock "github.com/stretchr/testify/mock"

	web "dengovie/internal/web"
)

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor struct {
	mock.Mock
}

type MockProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessor) EXPECT() *MockProcessor_Expecter {
	return &MockProcessor_Expecter{mock: &_m.Mock}
}

// Sign provides a mock function with given fields: data
func (_m *MockProcessor) Sign(data ...interface{}) (string, error) {
	var _ca []interface{}
	_ca = append(_ca, data...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (string, error)); ok {
		return rf(data...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) string); ok {
		r0 = rf(data...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(data...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProcessor_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockProcessor_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - data ...interface{}
func (_e *MockProcessor_Expecter) Sign(data ...interface{}) *MockProcessor_Sign_Call {
	return &MockProcessor_Sign_Call{Call: _e.mock.On("Sign",
		append([]interface{}{}, data...)...)}
}

func (_c *MockProcessor_Sign_Call) Run(run func(data ...interface{})) *MockProcessor_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockProcessor_Sign_Call) Return(_a0 string, _a1 error) *MockProcessor_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProcessor_Sign_Call) RunAndReturn(run func(...interface{}) (string, error)) *MockProcessor_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyJWT provides a mock function with given fields: _a0
func (_m *MockProcessor) VerifyJWT(_a0 string) (map[web.JWTKey]interface{}, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJWT")
	}

	var r0 map[web.JWTKey]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[web.JWTKey]interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) map[web.JWTKey]interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[web.JWTKey]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProcessor_VerifyJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyJWT'
type MockProcessor_VerifyJWT_Call struct {
	*mock.Call
}

// VerifyJWT is a helper method to define mock.On call
//   - _a0 string
func (_e *MockProcessor_Expecter) VerifyJWT(_a0 interface{}) *MockProcessor_VerifyJWT_Call {
	return &MockProcessor_VerifyJWT_Call{Call: _e.mock.On("VerifyJWT", _a0)}
}

func (_c *MockProcessor_VerifyJWT_Call) Run(run func(_a0 string)) *MockProcessor_VerifyJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProcessor_VerifyJWT_Call) Return(_a0 map[web.JWTKey]interface{}, _a1 error) *MockProcessor_VerifyJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProcessor_VerifyJWT_Call) RunAndReturn(run func(string) (map[web.JWTKey]interface{}, error)) *MockProcessor_VerifyJWT_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessor {
	mock := &MockProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
