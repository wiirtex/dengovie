// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "dengovie/internal/domain"

	mock "github.com/stretchr/testify/mock"

	types "dengovie/internal/store/types"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// AreUsersInGroup provides a mock function with given fields: ctx, userIDs, groupID
func (_m *MockStorage) AreUsersInGroup(ctx context.Context, userIDs []domain.UserID, groupID domain.GroupID) (bool, error) {
	ret := _m.Called(ctx, userIDs, groupID)

	if len(ret) == 0 {
		panic("no return value specified for AreUsersInGroup")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.UserID, domain.GroupID) (bool, error)); ok {
		return rf(ctx, userIDs, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []domain.UserID, domain.GroupID) bool); ok {
		r0 = rf(ctx, userIDs, groupID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []domain.UserID, domain.GroupID) error); ok {
		r1 = rf(ctx, userIDs, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_AreUsersInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AreUsersInGroup'
type MockStorage_AreUsersInGroup_Call struct {
	*mock.Call
}

// AreUsersInGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - userIDs []domain.UserID
//   - groupID domain.GroupID
func (_e *MockStorage_Expecter) AreUsersInGroup(ctx interface{}, userIDs interface{}, groupID interface{}) *MockStorage_AreUsersInGroup_Call {
	return &MockStorage_AreUsersInGroup_Call{Call: _e.mock.On("AreUsersInGroup", ctx, userIDs, groupID)}
}

func (_c *MockStorage_AreUsersInGroup_Call) Run(run func(ctx context.Context, userIDs []domain.UserID, groupID domain.GroupID)) *MockStorage_AreUsersInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.UserID), args[2].(domain.GroupID))
	})
	return _c
}

func (_c *MockStorage_AreUsersInGroup_Call) Return(_a0 bool, _a1 error) *MockStorage_AreUsersInGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_AreUsersInGroup_Call) RunAndReturn(run func(context.Context, []domain.UserID, domain.GroupID) (bool, error)) *MockStorage_AreUsersInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEmptyDebts provides a mock function with given fields: ctx, input
func (_m *MockStorage) CreateEmptyDebts(ctx context.Context, input types.CreateEmptyDebtsInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmptyDebts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateEmptyDebtsInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_CreateEmptyDebts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEmptyDebts'
type MockStorage_CreateEmptyDebts_Call struct {
	*mock.Call
}

// CreateEmptyDebts is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.CreateEmptyDebtsInput
func (_e *MockStorage_Expecter) CreateEmptyDebts(ctx interface{}, input interface{}) *MockStorage_CreateEmptyDebts_Call {
	return &MockStorage_CreateEmptyDebts_Call{Call: _e.mock.On("CreateEmptyDebts", ctx, input)}
}

func (_c *MockStorage_CreateEmptyDebts_Call) Run(run func(ctx context.Context, input types.CreateEmptyDebtsInput)) *MockStorage_CreateEmptyDebts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CreateEmptyDebtsInput))
	})
	return _c
}

func (_c *MockStorage_CreateEmptyDebts_Call) Return(_a0 error) *MockStorage_CreateEmptyDebts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_CreateEmptyDebts_Call) RunAndReturn(run func(context.Context, types.CreateEmptyDebtsInput) error) *MockStorage_CreateEmptyDebts_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, input
func (_m *MockStorage) DeleteUser(ctx context.Context, input types.DeleteUserInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.DeleteUserInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockStorage_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.DeleteUserInput
func (_e *MockStorage_Expecter) DeleteUser(ctx interface{}, input interface{}) *MockStorage_DeleteUser_Call {
	return &MockStorage_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, input)}
}

func (_c *MockStorage_DeleteUser_Call) Run(run func(ctx context.Context, input types.DeleteUserInput)) *MockStorage_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.DeleteUserInput))
	})
	return _c
}

func (_c *MockStorage_DeleteUser_Call) Return(_a0 error) *MockStorage_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_DeleteUser_Call) RunAndReturn(run func(context.Context, types.DeleteUserInput) error) *MockStorage_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByAlias provides a mock function with given fields: ctx, input
func (_m *MockStorage) GetUserByAlias(ctx context.Context, input types.GetUserByAliasInput) (types.User, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByAlias")
	}

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.GetUserByAliasInput) (types.User, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.GetUserByAliasInput) types.User); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.GetUserByAliasInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetUserByAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByAlias'
type MockStorage_GetUserByAlias_Call struct {
	*mock.Call
}

// GetUserByAlias is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.GetUserByAliasInput
func (_e *MockStorage_Expecter) GetUserByAlias(ctx interface{}, input interface{}) *MockStorage_GetUserByAlias_Call {
	return &MockStorage_GetUserByAlias_Call{Call: _e.mock.On("GetUserByAlias", ctx, input)}
}

func (_c *MockStorage_GetUserByAlias_Call) Run(run func(ctx context.Context, input types.GetUserByAliasInput)) *MockStorage_GetUserByAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.GetUserByAliasInput))
	})
	return _c
}

func (_c *MockStorage_GetUserByAlias_Call) Return(_a0 types.User, _a1 error) *MockStorage_GetUserByAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetUserByAlias_Call) RunAndReturn(run func(context.Context, types.GetUserByAliasInput) (types.User, error)) *MockStorage_GetUserByAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, input
func (_m *MockStorage) GetUserByID(ctx context.Context, input types.GetUserByIDInput) (types.User, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.GetUserByIDInput) (types.User, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.GetUserByIDInput) types.User); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.GetUserByIDInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockStorage_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.GetUserByIDInput
func (_e *MockStorage_Expecter) GetUserByID(ctx interface{}, input interface{}) *MockStorage_GetUserByID_Call {
	return &MockStorage_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, input)}
}

func (_c *MockStorage_GetUserByID_Call) Run(run func(ctx context.Context, input types.GetUserByIDInput)) *MockStorage_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.GetUserByIDInput))
	})
	return _c
}

func (_c *MockStorage_GetUserByID_Call) Return(_a0 types.User, _a1 error) *MockStorage_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetUserByID_Call) RunAndReturn(run func(context.Context, types.GetUserByIDInput) (types.User, error)) *MockStorage_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserInGroup provides a mock function with given fields: ctx, userID, groupID
func (_m *MockStorage) IsUserInGroup(ctx context.Context, userID domain.UserID, groupID domain.GroupID) (bool, error) {
	ret := _m.Called(ctx, userID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserInGroup")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.GroupID) (bool, error)); ok {
		return rf(ctx, userID, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.GroupID) bool); ok {
		r0 = rf(ctx, userID, groupID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserID, domain.GroupID) error); ok {
		r1 = rf(ctx, userID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_IsUserInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserInGroup'
type MockStorage_IsUserInGroup_Call struct {
	*mock.Call
}

// IsUserInGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - userID domain.UserID
//   - groupID domain.GroupID
func (_e *MockStorage_Expecter) IsUserInGroup(ctx interface{}, userID interface{}, groupID interface{}) *MockStorage_IsUserInGroup_Call {
	return &MockStorage_IsUserInGroup_Call{Call: _e.mock.On("IsUserInGroup", ctx, userID, groupID)}
}

func (_c *MockStorage_IsUserInGroup_Call) Run(run func(ctx context.Context, userID domain.UserID, groupID domain.GroupID)) *MockStorage_IsUserInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(domain.GroupID))
	})
	return _c
}

func (_c *MockStorage_IsUserInGroup_Call) Return(_a0 bool, _a1 error) *MockStorage_IsUserInGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_IsUserInGroup_Call) RunAndReturn(run func(context.Context, domain.UserID, domain.GroupID) (bool, error)) *MockStorage_IsUserInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserDebts provides a mock function with given fields: ctx, input
func (_m *MockStorage) ListUserDebts(ctx context.Context, input types.ListUserDebtsInput) ([]types.UserDebt, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ListUserDebts")
	}

	var r0 []types.UserDebt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ListUserDebtsInput) ([]types.UserDebt, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ListUserDebtsInput) []types.UserDebt); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.UserDebt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ListUserDebtsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_ListUserDebts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserDebts'
type MockStorage_ListUserDebts_Call struct {
	*mock.Call
}

// ListUserDebts is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.ListUserDebtsInput
func (_e *MockStorage_Expecter) ListUserDebts(ctx interface{}, input interface{}) *MockStorage_ListUserDebts_Call {
	return &MockStorage_ListUserDebts_Call{Call: _e.mock.On("ListUserDebts", ctx, input)}
}

func (_c *MockStorage_ListUserDebts_Call) Run(run func(ctx context.Context, input types.ListUserDebtsInput)) *MockStorage_ListUserDebts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ListUserDebtsInput))
	})
	return _c
}

func (_c *MockStorage_ListUserDebts_Call) Return(_a0 []types.UserDebt, _a1 error) *MockStorage_ListUserDebts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_ListUserDebts_Call) RunAndReturn(run func(context.Context, types.ListUserDebtsInput) ([]types.UserDebt, error)) *MockStorage_ListUserDebts_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserGroups provides a mock function with given fields: ctx, input
func (_m *MockStorage) ListUserGroups(ctx context.Context, input types.ListUserGroupsInput) ([]types.Group, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ListUserGroups")
	}

	var r0 []types.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ListUserGroupsInput) ([]types.Group, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ListUserGroupsInput) []types.Group); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ListUserGroupsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_ListUserGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserGroups'
type MockStorage_ListUserGroups_Call struct {
	*mock.Call
}

// ListUserGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.ListUserGroupsInput
func (_e *MockStorage_Expecter) ListUserGroups(ctx interface{}, input interface{}) *MockStorage_ListUserGroups_Call {
	return &MockStorage_ListUserGroups_Call{Call: _e.mock.On("ListUserGroups", ctx, input)}
}

func (_c *MockStorage_ListUserGroups_Call) Run(run func(ctx context.Context, input types.ListUserGroupsInput)) *MockStorage_ListUserGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ListUserGroupsInput))
	})
	return _c
}

func (_c *MockStorage_ListUserGroups_Call) Return(_a0 []types.Group, _a1 error) *MockStorage_ListUserGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_ListUserGroups_Call) RunAndReturn(run func(context.Context, types.ListUserGroupsInput) ([]types.Group, error)) *MockStorage_ListUserGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersInGroup provides a mock function with given fields: ctx, input
func (_m *MockStorage) ListUsersInGroup(ctx context.Context, input types.ListUsersInGroupInput) ([]types.User, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersInGroup")
	}

	var r0 []types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ListUsersInGroupInput) ([]types.User, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ListUsersInGroupInput) []types.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ListUsersInGroupInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_ListUsersInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersInGroup'
type MockStorage_ListUsersInGroup_Call struct {
	*mock.Call
}

// ListUsersInGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.ListUsersInGroupInput
func (_e *MockStorage_Expecter) ListUsersInGroup(ctx interface{}, input interface{}) *MockStorage_ListUsersInGroup_Call {
	return &MockStorage_ListUsersInGroup_Call{Call: _e.mock.On("ListUsersInGroup", ctx, input)}
}

func (_c *MockStorage_ListUsersInGroup_Call) Run(run func(ctx context.Context, input types.ListUsersInGroupInput)) *MockStorage_ListUsersInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ListUsersInGroupInput))
	})
	return _c
}

func (_c *MockStorage_ListUsersInGroup_Call) Return(_a0 []types.User, _a1 error) *MockStorage_ListUsersInGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_ListUsersInGroup_Call) RunAndReturn(run func(context.Context, types.ListUsersInGroupInput) ([]types.User, error)) *MockStorage_ListUsersInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ShareDebt provides a mock function with given fields: ctx, input
func (_m *MockStorage) ShareDebt(ctx context.Context, input types.ShareDebtInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ShareDebt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ShareDebtInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_ShareDebt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShareDebt'
type MockStorage_ShareDebt_Call struct {
	*mock.Call
}

// ShareDebt is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.ShareDebtInput
func (_e *MockStorage_Expecter) ShareDebt(ctx interface{}, input interface{}) *MockStorage_ShareDebt_Call {
	return &MockStorage_ShareDebt_Call{Call: _e.mock.On("ShareDebt", ctx, input)}
}

func (_c *MockStorage_ShareDebt_Call) Run(run func(ctx context.Context, input types.ShareDebtInput)) *MockStorage_ShareDebt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ShareDebtInput))
	})
	return _c
}

func (_c *MockStorage_ShareDebt_Call) Return(_a0 error) *MockStorage_ShareDebt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_ShareDebt_Call) RunAndReturn(run func(context.Context, types.ShareDebtInput) error) *MockStorage_ShareDebt_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserName provides a mock function with given fields: ctx, input
func (_m *MockStorage) UpdateUserName(ctx context.Context, input types.UpdateUserNameInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateUserNameInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_UpdateUserName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserName'
type MockStorage_UpdateUserName_Call struct {
	*mock.Call
}

// UpdateUserName is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.UpdateUserNameInput
func (_e *MockStorage_Expecter) UpdateUserName(ctx interface{}, input interface{}) *MockStorage_UpdateUserName_Call {
	return &MockStorage_UpdateUserName_Call{Call: _e.mock.On("UpdateUserName", ctx, input)}
}

func (_c *MockStorage_UpdateUserName_Call) Run(run func(ctx context.Context, input types.UpdateUserNameInput)) *MockStorage_UpdateUserName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.UpdateUserNameInput))
	})
	return _c
}

func (_c *MockStorage_UpdateUserName_Call) Return(_a0 error) *MockStorage_UpdateUserName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_UpdateUserName_Call) RunAndReturn(run func(context.Context, types.UpdateUserNameInput) error) *MockStorage_UpdateUserName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
