// Code generated by mockery. DO NOT EDIT.

package telegram

import (
	context "context"

	bot "github.com/go-telegram/bot"

	mock "github.com/stretchr/testify/mock"

	models "github.com/go-telegram/bot/models"
)

// Mockbot is an autogenerated mock type for the bot type
type Mockbot struct {
	mock.Mock
}

type Mockbot_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockbot) EXPECT() *Mockbot_Expecter {
	return &Mockbot_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: ctx, params
func (_m *Mockbot) SendMessage(ctx context.Context, params *bot.SendMessageParams) (*models.Message, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bot.SendMessageParams) (*models.Message, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bot.SendMessageParams) *models.Message); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bot.SendMessageParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockbot_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type Mockbot_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - params *bot.SendMessageParams
func (_e *Mockbot_Expecter) SendMessage(ctx interface{}, params interface{}) *Mockbot_SendMessage_Call {
	return &Mockbot_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, params)}
}

func (_c *Mockbot_SendMessage_Call) Run(run func(ctx context.Context, params *bot.SendMessageParams)) *Mockbot_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*bot.SendMessageParams))
	})
	return _c
}

func (_c *Mockbot_SendMessage_Call) Return(_a0 *models.Message, _a1 error) *Mockbot_SendMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockbot_SendMessage_Call) RunAndReturn(run func(context.Context, *bot.SendMessageParams) (*models.Message, error)) *Mockbot_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *Mockbot) Start(ctx context.Context) {
	_m.Called(ctx)
}

// Mockbot_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Mockbot_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockbot_Expecter) Start(ctx interface{}) *Mockbot_Start_Call {
	return &Mockbot_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *Mockbot_Start_Call) Run(run func(ctx context.Context)) *Mockbot_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockbot_Start_Call) Return() *Mockbot_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mockbot_Start_Call) RunAndReturn(run func(context.Context)) *Mockbot_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockbot creates a new instance of Mockbot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbot(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockbot {
	mock := &Mockbot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
